@page "/order/manager"
@attribute [Authorize]
@rendermode InteractiveServer
@inject IConfiguration configuration
@inject IJSRuntime JsRuntime
@inject IApiService ApiService
@inject IHttpContextAccessor HttpContextAcessor
@inject IApiService ApiService
@inject NavigationManager navigationManager
@inject UserManager<ApplicationUser> UserManager

<h3>Gerenciador de Pedidos</h3>
@if (Orders.Count() == 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Mesa</th>
                <th>Número</th>
                <th>Produtos</th>
                <th>Horário do Pedido</th>
                <th>Entregue</th>
            </tr>
        </thead>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Mesa</th>
                <th>Número</th>
                <th>Produtos</th>
                <th>Horário do Pedido</th>
                <th>Entregue</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tableOrder in Orders)
            {
                int firstIteration = 0;
                @foreach (var order in tableOrder.OrderByDescending(x => x.CreatedAt))
                {
                    <tr>
                        @if (firstIteration == 0)
                        {
                            <td rowspan="@tableOrder.Count()" class="align-middle">@tableOrder.Where(x => x.Table.Id == tableOrder.Key).Select(x => x.Table.Identification).First()</td>
                        }
                        <td class="align-middle">@order.Id</td>
                        <td class="align-middle">
                            @foreach (OrderProductDTO orderProducts in order.Products)
                            {
                                <p>Qtd: @string.Concat(orderProducts.Amount, "x") - Produto:  @orderProducts.Product.Name</p>
                            }
                        </td>
                        <td class="align-middle">@order.CreatedAt</td>
                        <td class="align-middle">
                            <div class="form-check form-switch">
                                @if (order.Deliverd)
                                {
                                    <InputCheckbox @bind-Value="order.Deliverd" @onclick="(args) => DeliverOrder(order.Id)" class="form-check-input" type="checkbox" checked="checked" id="flexSwitchCheckDefault" />
                                }
                                else
                                {
                                    <InputCheckbox @bind-Value="order.Deliverd" @onclick="(args) => DeliverOrder(order.Id)" class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" />
                                }

                            </div>
                        </td>
                    </tr>
                    firstIteration++;
                }
            }
        </tbody>
    </table>
}
@if (BillClosureOrders.Count == 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Número</th>
                <th>Mesa</th>
                <th>Cliente</th>
                <th>Valor</th>
                <th>Fechamento Parcial</th>
                <th>Pago</th>
            </tr>
        </thead>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Número</th>
                <th>Mesa</th>
                <th>Cliente</th>
                <th>Valor</th>
                <th>Fechamento Parcial</th>
                <th>Pago</th>
            </tr>
        </thead>
        <tbody>
            @foreach (BillClosureOrderDTO billClosureOrder in BillClosureOrders)
            {
                <tr>
                    <td class="align-middle">@billClosureOrder.Id</td>
                    <td class="align-middle">@billClosureOrder.TableId</td>
                    <td class="align-middle">@billClosureOrder.CustumerDocument</td>
                    <td class="align-middle">@billClosureOrder.Value</td>
                    <td class="align-middle">
                        @if (billClosureOrder.CloseTotal)
                        {
                            <p>Não</p>
                        }
                        else
                        {
                            <p>Sim</p>
                        }
                    </td>
                    <td class="align-middle">
                        <div class="form-check form-switch">
                            @if (billClosureOrder.OrderCompleted)
                            {
                                <InputCheckbox @bind-Value="billClosureOrder.OrderCompleted" @onclick="(args) => CompleteBillOrder(billClosureOrder)" class="form-check-input" type="checkbox" checked="checked" id="flexSwitchCheckDefault" />
                            }
                            else
                            {
                                <InputCheckbox @bind-Value="billClosureOrder.OrderCompleted" @onclick="(args) => CompleteBillOrder(billClosureOrder)" class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" />
                            }

                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    IEnumerable<IGrouping<int, OrderDTO>> Orders { get; set; } = new List<IGrouping<int, OrderDTO>>();
    List<BillClosureOrderDTO> BillClosureOrders { get; set; } = new List<BillClosureOrderDTO>();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal CurrentUser;
    private ApplicationUser user = default!;
    private int _companyId;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        if (CurrentUser.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(CurrentUser);
            _companyId = user.CompanyId;
        }
        string? url = configuration["ApiLinks:OrderGetAllToDelivery"];
        GenericCommandResult commandResult = await ApiService.Get<List<OrderDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), _companyId);
        if (commandResult.Sucess && commandResult.Data is List<OrderDTO> orders)
        {

            Orders =  orders.GroupBy(x => x.Table.Id).OrderBy(x => x.First().Table.Identification);
        }
        url = configuration["ApiLinks:BillClosureOrderGetAll"];
        commandResult = await ApiService.Get<List<BillClosureOrderDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), 1);
        if (commandResult.Sucess && commandResult.Data is List<BillClosureOrderDTO> billClosureOrderDTO)
            BillClosureOrders =  billClosureOrderDTO;
    }

    public async void DeliverOrder(int id)
    {
        var url = configuration["ApiLinks:DeliverOrder"];
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("id", id);
        parameters.Add("companyId", _companyId);
        GenericCommandResult commandResult = await ApiService.PutWithParameters<OrderDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
        if (commandResult.Sucess)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Pedido marcado como entregue.");
            navigationManager.NavigateTo(configuration["ApplicationLinks:OrderManager"].ToString(), true);
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }
    public async void CompleteBillOrder(BillClosureOrderDTO billClosureOrder)
    {
        var url = configuration["ApiLinks:CloseBill"];
        GenericCommandResult commandResult = await ApiService.PutAsJsonAsync<BillClosureOrderDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), billClosureOrder);
        if (commandResult.Sucess)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Pedido marcado como entregue.");
            navigationManager.NavigateTo(configuration["ApplicationLinks:OrderManager"].ToString(), true);
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }
}
