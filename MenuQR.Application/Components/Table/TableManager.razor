@page "/table/manager"
@attribute [Authorize]
@rendermode InteractiveServer
@inject IConfiguration configuration
@inject IJSRuntime JsRuntime
@inject IApiService ApiService

<h3>Gerenciador de Mesas</h3>
<a href="/table/create/" class="btn btn-primary">Adicionar</a>
@if (Tables.Count == 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Identificação</th>
                <th>QRLink</th>
                <th>Editar</th>
            </tr>
        </thead>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Identificação</th>
                <th>QRLink</th>
                <th>Editar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (TableDTO table in Tables)
            {
                <tr>
                    <td class="align-middle">@table.Identification</td>
                    <td class="align-middle">@table.QRLink</td>
                    <td class="align-middle">
                        <a href="/table/edit/@table.Id" class="btn btn-primary">Editar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<TableDTO> Tables { get; set; } = new List<TableDTO>();

    protected override async Task OnInitializedAsync()
    {
        string? url = configuration["ApiLinks:TableGetAll"];
        GenericCommandResult commandResult = await ApiService.Get<List<TableDTO>>(url);
        if (commandResult.Sucess && commandResult.Data is List<TableDTO>)
            Tables = (List<TableDTO>)commandResult.Data;
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }
}
