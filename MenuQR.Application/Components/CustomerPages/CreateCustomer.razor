@page "/customer/create/{CPF:long}"
@inject IConfiguration configuration
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject IApiService ApiService
@inject NavigationManager navigationManager

@layout MenuQR.Application.Components.Layout.EmptyLayout


<EditForm OnValidSubmit="OnSubmit" Model="@Model" FormName="createCustomer">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="card card-container">
            <img id="profile-img" class="profile-img-card" src="//ssl.gstatic.com/accounts/ui/avatar_2x.png" />
            <p id="profile-name" class="profile-name-card">Insira o nome completo.</p>
            <div class="div-signin" id="div-signin">
                <span id="reauth-cpf" class="reauth"></span>
                <InputText @bind-Value="Model.Document" type="text" id="inputCPFS" class="form-control" placeholder="CPF" required autofocus />
                <span id="reauth-cpf" class="reauth"></span>
                <InputText @bind-Value="Model.Name" type="text" id="inputName" class="form-control" placeholder="Nome" required autofocus />
                <button class="btn btn-lg btn-primary btn-block btn-signin" type="submit">Entrar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public CustomerDTO Model { get; set; } = new CustomerDTO();
    [Parameter]
    public long CPF { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Model.Document = CPF.ToString();
    }
    public async void OnSubmit()
    {
        var url = configuration["ApiLinks:CustomerCreate"];
        GenericCommandResult commandResult = await ApiService.PostAsJsonAsync<CustomerDTO>(url, Model);
        var result = await ((HttpResponseMessage)commandResult.Data).Content.ReadAsStringAsync();
        if (commandResult.Sucess)
            navigationManager.NavigateTo(configuration["ApplicationLinks:ProductSelection"]);
        else if (!commandResult.Sucess && result is string message)
            await JsRuntime.InvokeVoidAsync("alert", message);
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro.");
    }
}
