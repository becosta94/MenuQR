@page "/{CompanyId:int}/{TableId:int}/customer/create/{SetHashCode:int}"
@using MenuQR.Application.Data
@using Microsoft.AspNetCore.Identity
@inject IConfiguration configuration
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject IApiService ApiService
@inject NavigationManager navigationManager
@inject UserManager<ApplicationUser> UserManager
@layout MenuQR.Application.Components.Layout.EmptyLayout
@inject StateContainer stateContainer

<EditForm OnValidSubmit="OnSubmit" Model="@Model" FormName="createCustomer">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="card card-container">
            <p id="profile-name" class="profile-name-card">Insira o nome completo.</p>
            <div class="div-signin" id="div-signin">
                <span id="reauth-cpf" class="reauth"></span>
                <fieldset disabled>
                    <InputText @bind-Value="Model.Document" type="text" id="inputCPFS" class="form-control" placeholder="CPF" required autofocus />
                    <span id="reauth-cpf" class="reauth"></span>
                </fieldset>
                <InputText @bind-Value="Model.Name" type="text" id="inputName" class="form-control" placeholder="Nome" required autofocus />
                <button class="btn btn-lg btn-primary btn-block btn-signin" type="submit">Entrar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public CustomerDTO Model { get; set; } = new CustomerDTO();
    [Parameter]
    public int SetHashCode { get; set; }
    [Parameter]
    public int CompanyId { get; set; }
    [Parameter]
    public int TableId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Model = (CustomerDTO)stateContainer.ObjectTunnel[SetHashCode];
    }
    public async void OnSubmit()
    {
        var url = configuration["ApiLinks:CustomerCreate"];
        GenericCommandResult commandResult = await ApiService.PostAsJsonAsync<CustomerDTO>(url, null, Model);
        var result = await ((HttpResponseMessage)commandResult.Data).Content.ReadAsStringAsync();
        if (commandResult.Sucess)
        {
            stateContainer.ObjectTunnel.Add(Model.GetHashCode(), Model);
            navigationManager.NavigateTo(CompanyId.ToString() + "/" + TableId + "/" + configuration["ApplicationLinks:CustomerTokenCreate"] + Model.GetHashCode());
        }
        else if (!commandResult.Sucess && result is string message)
            await JsRuntime.InvokeVoidAsync("alert", message);
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro.");
    }
}
