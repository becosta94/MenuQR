@page "/{CompanyName}/{TableGuid:guid}/product/selection/confirmation/{SetHashCode:int}"
@rendermode InteractiveServer
@inject StateContainer stateContainer
@layout MenuQR.Application.Components.Layout.CustomerLayout
@inject IConfiguration configuration
@inject IJSRuntime JsRuntime
@inject IApiService ApiService
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAcessor
@inject ISessionStorageService SessionStorage


<div class="title-container-top d-flex justify-content-around">
    <div>
        <p class="nav-item nav-link">Carrinho</p>
    </div>
</div>
<div style="padding-top: 60px"></div>
@foreach (OrderProductCreateDTO orderProductDTO in OrderProductsCrete)
{

    <div class="justify-content-center border border-light rounded mt-60 mb-2 px-3">
        <div class="row justify-content-around mb-1">
            <h2 class="col-sm">@orderProductDTO.Product.Name</h2>
            <div class="col-6 d-flex justify-content-end">
                <p class="col-6">@orderProductDTO.Product.Description</p>
                <img height="100" width="100" src="@string.Format("data:image/png;base64, {0}", @orderProductDTO.Product.Image)" alt="Product 1" class="img-fluid border border-dark">
            </div>
        </div>
        <div class="mb-2 row justify-content-around">
            <div class="col-6 d-flex align-items-center ">
                <p class="mb-0">R$ @orderProductDTO.Product.Price.ToString("0.00")</p>
            </div>
            <div class="col-2 d-flex align-items-center ">
                <p class="mb-0">@orderProductDTO.Amount</p>
            </div>
        </div>
    </div>
}
<footer class="footer text-center scroll-container-bottom" style="margin-top: auto">
    <div class="justify-content-around bd-highlight btn-toolbar">
        <div class="btn-group mr-md-3" role="group">
            <button @onclick="Cancel" class="btn btn-secondary">Cancelar</button>
        </div>
        <div class="btn-group mr-md-3" role="group">
            <button @onclick="Confirm" class="btn btn-primary">Confirmar</button>
        </div>
    </div>
</footer>

@code {
    private string _tableId;
    List<OrderProductCreateDTO> OrderProductsCrete { get; set; } = new List<OrderProductCreateDTO>();
    [Parameter]
    public int SetHashCode { get; set; }
    [Parameter]
    public string CompanyName { get; set; }
    [Parameter]
    public Guid TableGuid { get; set; }
    protected override void OnInitialized()
    {
        if (HttpContextAcessor.HttpContext.Request.Cookies["TableId"] == null)
            navigationManager.NavigateTo("/Error");
        _tableId  = HttpContextAcessor.HttpContext.Request.Cookies["TableId"].ToString();
        List<OrderProductDTO> orderProducts = (List<OrderProductDTO>)stateContainer.ObjectTunnel[SetHashCode];
        orderProducts.ForEach(x => OrderProductsCrete.Add(new OrderProductCreateDTO() { Amount = x.Amount, CompanyId = x.CompanyId, Id = x.Id, Product = x.Product, ProductId = x.ProductId, Total = x.Total}));

    }
    private async void Confirm()
    {
        var url = configuration["ApiLinks:BillClosureOrderGet"];
        string tableId = HttpContextAcessor.HttpContext.Request.Cookies["TableId"].ToString();
        string companyId = HttpContextAcessor.HttpContext.Request.Cookies["CompanyId"].ToString();
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("tableId", tableId);
        parameters.Add("companyId", companyId);
        GenericCommandResult commandResult = await ApiService.GetWithParameters<object>(url, null, parameters);
        BillClosureOrderDTO billResultObject = JsonConvert.DeserializeObject<BillClosureOrderDTO>(commandResult.Data.ToString());
        if (commandResult.Sucess && billResultObject.Id != 0 && billResultObject.CloseTotal)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Conta fechada.");
            navigationManager.NavigateTo(companyId + "/" + tableId + "/" + configuration["ApplicationLinks:LoginCustomer"], true);
            return;
        }
        string customerDocument = HttpContextAcessor.HttpContext.Request.Cookies["CustomerDocument"].ToString();
        url = configuration["ApiLinks:OrderCreateByCustomer"] + $"tableId={_tableId}&customerDocument={customerDocument}";
        commandResult = await ApiService.PostAsJsonAsync<List<OrderProductCreateDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), OrderProductsCrete);
        if (commandResult.Sucess)
            navigationManager.NavigateTo(CompanyName + "/" + TableGuid + "/" + configuration["ApplicationLinks:ProductSelection"]);
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro.");
    }
    private void Cancel()
    {
        navigationManager.NavigateTo(CompanyName + "/" + TableGuid + "/" + configuration["ApplicationLinks:ProductSelection"]);
    }


}