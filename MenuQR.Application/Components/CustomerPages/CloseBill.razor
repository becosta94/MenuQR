@page "/bill/close/{CloseTotal:bool}"
@rendermode InteractiveServer
@inject StateContainer stateContainer
@inject NavigationManager navigationManager
@inject IConfiguration configuration
@inject IHttpContextAccessor HttpContextAcessor
@inject IApiService ApiService
@inject IJSRuntime JsRuntime
@layout MenuQR.Application.Components.Layout.CustomerLayout

<div class="title-container-top d-flex justify-content-around">
    @if (CloseTotal)
    {
        <div>
            <p class="nav-item nav-link">Fechar Total</p>
        </div>
    }
    else
    {
        <div>
            <p class="nav-item nav-link">Fechar Parcial</p>
        </div>
    }
</div>
<div style="padding-top: 60px"></div>
<br />
@if (openOrder)
{
    <div>
        <p>Existem pedidos em aberto, não é possível cálcular a conta.</p>
    </div>
}
else
{
    <div>

        @if (_bill != null)
        {
            @foreach (var a in _customersOrders)
            {
                <p>@a.Where(x => x.Order.CustomerDocument == a.Key).Select(x => x.Order.CustomerDTO.Name).First()</p>
                @foreach (var b in a.GroupBy(x => x.Product.Id))
                {
                    <div class="d-flex">
                        <div class="p-2">@b.Count() x</div>
                        <div class="p-2">@b.First().Product.Name</div>
                        <div class="ms-auto p-2">R$ @b.First().Product.Price.ToString("0.00")</div>
                    </div>
                }
                if (CloseTotal)
                {

                    <div class="d-flex">
                        <div class="p-2">Total Parcial: </div>
                        <div class="ms-auto p-2">@a.Sum(x => x.Total).ToString("0.00")</div>
                    </div>
                }
                <br />
            }
            <div class="d-flex">
                <div class="p-2">Total Geral: </div>
                <div class="ms-auto p-2">@_bill.OrderProducts.Sum(x => x.Total).ToString("0.00")</div>
            </div>
        }
    </div>
}

<footer class="footer text-center scroll-container-bottom" style="margin-top: auto">
    <div class="justify-content-around bd-highlight btn-toolbar">
        <div class="btn-group mr-md-3" role="group">
            <button @onclick="Cancel" class="btn btn-danger">Cancelar</button>
        </div>
        @if (!openOrder)
        {
            <div class="btn-group mr-md-3" role="group">
                <a @onclick="() => Close(this._tableId)" class="btn btn-primary">Fechar Conta</a>
            </div>
        }
    </div>
</footer>

@code {
    [Parameter]
    public bool CloseTotal { get; set; }
    private BillDTO _bill;
    private string _customerDocument;
    private IEnumerable<IGrouping<string, OrderProductDTO>> _customersOrders = new List<IGrouping<string, OrderProductDTO>>();
    private int _tableId;
    private bool openOrder = false;

    protected override async Task OnInitializedAsync()
    {
        _customerDocument = HttpContextAcessor.HttpContext.Request.Cookies["CustomerDocument"].ToString();
        var url = configuration["ApiLinks:BillGet"];
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("tableId", 1);
        parameters.Add("companyId", 1);
        if (CloseTotal)
        {
            parameters.Add("closeTotal", "true");
            parameters.Add("customerDocument", 0);
        }
        else
        {
            parameters.Add("closeTotal", "false");
            parameters.Add("customerDocument", _customerDocument);
        }
        GenericCommandResult commandResult = await ApiService.GetWithParameters<object>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
        BillDTO billResultObject = JsonConvert.DeserializeObject<BillDTO>(commandResult.Data.ToString());
        ErroDTO erroResultObject = JsonConvert.DeserializeObject<ErroDTO>(commandResult.Data.ToString());
        if (commandResult.Sucess && billResultObject.Id != 0)
        {
            url = configuration["ApiLinks:CustomerGetById"];
            _bill = billResultObject;
            foreach (var a in _bill.OrderProducts)
            {
                commandResult = await ApiService.GetById<CustomerDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), a.Order.CustomerDocument);
                if (commandResult.Sucess && commandResult.Data is CustomerDTO customer)
                {
                    a.Order.CustomerDTO = customer;
                    _customersOrders = _bill.OrderProducts.GroupBy(x => x.Order.CustomerDocument);
                }
            }
            return;
        }
        if (commandResult.Sucess && !string.IsNullOrEmpty(erroResultObject.Menssage))
            openOrder = true;
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }

    public async void Close(int tableId)
    {
        string token = HttpContextAcessor.HttpContext.Request.Cookies["Token"];
        if (string.IsNullOrEmpty(token))
            navigationManager.NavigateTo(configuration["ApplicationLinks:LoginCustomer"].ToString(), true);
        var url = configuration["ApiLinks:CloseBill"];
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("tableId", 1);
        parameters.Add("companyId", 1);
        if (CloseTotal)
        {
            parameters.Add("closeTotal", "true");
            parameters.Add("customerDocument", 0);
        }
        else
        {
            parameters.Add("closeTotal", "false");
            parameters.Add("customerDocument", _customerDocument);
        }
        GenericCommandResult commandResult = await ApiService.PutWithParameters<BillDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
        if (commandResult.Sucess && commandResult.Data is HttpResponseMessage response)
        {
            string? content = response.Content.ReadAsStringAsync().Result;
            BillDTO? contentObjectBill = JsonConvert.DeserializeAnonymousType(content, new BillDTO());
            ErroDTO? contentObjectErro = JsonConvert.DeserializeAnonymousType(content, new ErroDTO());
            if (content is not null && contentObjectBill.Id != 0)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Conta fechada");
                navigationManager.NavigateTo(configuration["ApplicationLinks:LoginCustomer"].ToString(), true);
            }
            else if (content is not null && !string.IsNullOrEmpty(contentObjectErro.Menssage))
                await JsRuntime.InvokeVoidAsync("alert", contentObjectErro.Menssage);
            else
                await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }
    private void Cancel()
    {
        navigationManager.NavigateTo(configuration["ApplicationLinks:ProductSelection"].ToString());
    }
}
