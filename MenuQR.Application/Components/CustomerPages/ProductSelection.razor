@page "/{CompanyName}/{TableGuid:guid}/product/selection"
@inject IConfiguration configuration
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject IHttpContextAccessor HttpContextAcessor
@inject IApiService ApiService
@layout MenuQR.Application.Components.Layout.CustomerLayout
@inject StateContainer stateContainer
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAcessor


@if (Products.Count == 0) { }
else
{
    <div class="scroll-container-top d-flex justify-content-around">
        @foreach (ProductTypeDTO productType in ProductsType)
        {
            <a @onclick="() => SetFocus(productType.Id)" class="nav-item nav-link">@productType.TypeName</a>
        }
    </div>
    <div style="padding-top: 60px"></div>
    <EditForm OnValidSubmit="@HandleValidSubmit" Model="@OrderProducts" FormName="addOrder">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @foreach (ProductDTO product in Products)
        {

            <div class="justify-content-center border border-light rounded mt-60 mb-2 px-3 @string.Concat("typeProduct", product.TypeId)">
                <h2 class="col-sm">@product.Name</h2>
                <div class="row justify-content-around mb-1">
                    <p class="col-6">@product.Description</p>
                    <div class="col-6 d-flex justify-content-end">
                        <img height="100" width="105" src="@string.Format("data:image/png;base64, {0}", product.Image)" alt="Product 1" class="border border-dark">
                    </div>
                </div>
                <div class="mb-2 row justify-content-around">
                    <div class="col-6 d-flex align-items-center ">
                        <p class="mb-0">R$ @product.Price.ToString("0.00")</p>
                    </div>
                    <div class="col-6 d-flex justify-content-end align-items-center">
                        <p @onclick="() => ChangeAmount(false, product)" class="col-3 text-secondary mb-0 d-flex justify-content-center" style="font-size: 20px">-</p>
                        <p id="@string.Concat("amount", product.Id)" class="mb-0 me-1 ms-1">0</p>
                        <p @onclick="() => ChangeAmount(true, product)" class="col-3 text-danger mb-0 d-flex justify-content-center" style="font-size: 20px">+</p>
                    </div>
                </div>
            </div>
        }
    </EditForm>
    <CascadingValue Value="@CompanyName">
        <CascadingValue Value="@TableGuid">
            <footer class="footer text-center scroll-container-bottom" style="margin-top: auto">
                <DownBarButtons OnButtonClick="@OnSubmit" />
            </footer>
        </CascadingValue>
    </CascadingValue>
    <div style="padding-top: 60px"></div>
}
<script>
    function IncreaseAmount(increase, productId) {
        let amount = document.getElementById("amount" + productId).innerHTML;
        if (amount === '0' && !increase)
            return 0;
        else if (amount === '99' && increase)
            return;
        if (increase) {
            amount++;
        }
        else {
            amount--;
        }
        document.getElementById("amount" + productId).innerHTML = amount
        return amount;
    }
    function SetFocus(typeProductId) {
        var element = document.getElementsByClassName("typeProduct" + typeProductId)[0];
        var headerOffset = 70;
        var elementPosition = element.getBoundingClientRect().top;
        var offsetPosition = elementPosition + window.pageYOffset - headerOffset;

        window.scrollTo({
            top: offsetPosition,
            behavior: "smooth"
        });
    }
</script>



@code {
    List<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    List<ProductTypeDTO> ProductsType { get; set; } = new List<ProductTypeDTO>();
    List<OrderProductDTO> OrderProducts { get; set; } = new List<OrderProductDTO>();
    public OrderDTO Model { get; set; }
    [Parameter]
    public string CompanyName { get; set; }
    [Parameter]
    public Guid TableGuid { get; set; }
    private int _companyId;
    protected override async Task OnInitializedAsync()
    {
        var url = configuration["ApiLinks:ProductGetAll"];
        if (HttpContextAcessor.HttpContext.Request.Cookies["Token"] == null)
            navigationManager.NavigateTo($"/Error");
        _companyId = int.Parse(HttpContextAcessor.HttpContext.Request.Cookies["CompanyId"].ToString());
        GenericCommandResult commandResult = await ApiService.Get<List<ProductDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), _companyId);
        if (commandResult.Sucess && commandResult.Data is List<ProductDTO> productsApi)
            Products = productsApi.Where(x => x.Active).OrderBy(x => x.TypeId).ToList();
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
        url = configuration["ApiLinks:ProductTypeGetAll"];
        commandResult = await ApiService.Get<List<ProductTypeDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), _companyId);
        if (commandResult.Sucess && commandResult.Data is List<ProductTypeDTO>)
            ProductsType =  commandResult.Data as List<ProductTypeDTO>;
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
        StateHasChanged();
    }

    public async void OnSubmit()
    {
        if (OrderProducts.Count == 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Carrinho vazio.");
            return;
        }
        stateContainer.ObjectTunnel.Add(OrderProducts.GetHashCode(), OrderProducts);
        navigationManager.NavigateTo(CompanyName + "/" + TableGuid + configuration["ApplicationLinks:ProductSelectionConfimation"] + OrderProducts.GetHashCode());
    }

    protected async void ChangeAmount(bool increase, ProductDTO product)
    {
        object[] args = { increase, product.Id };
        int amount = await JsRuntime.InvokeAsync<int>("IncreaseAmount", args);

        if (amount == 0)
        {
            if (OrderProducts.Where(x => x.ProductId == product.Id).ToList().Count() != 0)
                OrderProducts.RemoveAll(x => x.ProductId == product.Id);
            return;
        }
        else if (OrderProducts.Count == 0  || OrderProducts.Where(x => x.ProductId == product.Id).ToList().Count() == 0)
            OrderProducts.Add(new OrderProductDTO { Product = product, Amount = amount, ProductId = product.Id, CompanyId = 1 });
        else if (OrderProducts.Where(x => x.ProductId == product.Id).First().Amount > 0)
            OrderProducts.Where(x => x.ProductId == product.Id).First().Amount = amount;
    }

    private void HandleValidSubmit()
    {
        // Lógica de submissão do formulário
    }

    protected async void SetFocus(int typeProductId)
    {
        await JsRuntime.InvokeVoidAsync("SetFocus", typeProductId);
    }
}