@page "/product/typemanager"
@attribute [Authorize]
@inject HttpClient http
@inject IConfiguration configuration
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject IApiService ApiService
@inject IHttpContextAccessor HttpContextAcessor
@inject IJSRuntime JsRuntime

<h3>ProductManager</h3>
<a href="/product/typecreate/" class="btn btn-primary">Adicionar</a>
@if (ProductsType.Count == 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Editar</th>
            </tr>
        </thead>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Editar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (ProductTypeDTO productType in ProductsType)
            {
                <tr>
                    <td class="align-middle" scope="row">@productType.TypeName</td>
                    <td class="align-middle">
                        <a href="/product/typeedit/@productType.Id" class="btn btn-primary">Editar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<ProductTypeDTO> ProductsType { get; set; } = new List<ProductTypeDTO>();

    protected override async Task OnInitializedAsync()
    {
        var url = configuration["ApiLinks:ProductTypeGetAll"];
        GenericCommandResult commandResult = await ApiService.Get<List<ProductTypeDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), 1);
        if (commandResult.Sucess && commandResult.Data is List<ProductTypeDTO>)
            ProductsType =  commandResult.Data as List<ProductTypeDTO>;
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }

}
