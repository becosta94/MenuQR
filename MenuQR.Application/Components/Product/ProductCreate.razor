@page "/product/create"
@attribute [Authorize]
@rendermode InteractiveServer
@inject IWebHostEnvironment Env
@inject IConfiguration configuration
@inject IApiService ApiService
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@inject IHttpContextAccessor HttpContextAcessor
@inject UserManager<ApplicationUser> UserManager

<h3>Adicionar Produto</h3>

<EditForm OnValidSubmit="OnSubmit" Model="@Model" FormName="addProduct">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Nome:</label>
        <InputText @bind-Value="Model.Name" class="form-control" style="max-width: 60%" require />
    </div>
    <div class="mb-3">
        <label class="form-label">Preço:</label>
        <InputNumber @bind-Value="Model.Price" class="form-control" style="max-width: 60%" />
    </div>
    <div class="mb-3">
        <label class="form-label">Descrição:</label>
        <InputTextArea @bind-Value="Model.Description" class="form-control" style="max-width: 60%" />
    </div>
    <div class="mb-3">
        <label class="form-label">Tipo:</label>
        <InputSelect @bind-Value="Model.ProductTypeId" class="form-select" style="max-width: 60%">
            @if (ProductsType == null || ProductsType.Count == 0)
            {
                <option></option>
            }
            else
            {
                <option selected value=""></option>
                @foreach (ProductTypeDTO productType in ProductsType)
                {
                    <option value="@productType.Id">@productType.TypeName</option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Imagem:</label>
        <BlazorInputFile.InputFile OnChange=HandleFileSelected class="form-control" style="max-width: 60%" />
        @if (!string.IsNullOrEmpty(ImageDataUrl))
        {
            <img src="@ImageDataUrl" height="200" width="200" class="img-fluid border border-dark mt-3 mb-3" />
        }
    </div>
    <button type="submit" class="btn btn-primary">Enviar</button>
</EditForm>

@code {
    public IFileListEntry? File;
    public MemoryStream MsFile;
    public ProductDTO Model { get; set; } = new ProductDTO();
    public string ImageDataUrl;
    List<ProductTypeDTO> ProductsType { get; set; } = new List<ProductTypeDTO>();
    public string Base64;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal CurrentUser;
    private ApplicationUser user = default!;
    private int _companyId;

    public async void OnSubmit()
    {
        Model.Active = true;
        Model.CompanyId = _companyId;
        string url = configuration["ApiLinks:ProductCreate"];
        GenericCommandResult commandResult = await ApiService.PostAsJsonAsync<ProductDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), Model);
        if (commandResult.Sucess)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Produto cadastrado");
            navigationManager.NavigateTo(configuration["ApplicationLinks:ProductManager"]);
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, produto não cadastrado");
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        if (CurrentUser.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(CurrentUser);
            _companyId = user.CompanyId;
        }
        string url = configuration["ApiLinks:ProductTypeGetAll"];
        GenericCommandResult commandResult = await ApiService.Get<List<ProductTypeDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), _companyId);
        if (commandResult.Sucess && commandResult.Data is List<ProductTypeDTO> productsTypeApi)
            ProductsType = productsTypeApi;
    }
    async Task HandleFileSelected(IFileListEntry[] files)
    {
        try
        {
            File =  files.FirstOrDefault();
            if (File != null)
            {
                string name = File.Name;
                MsFile = new MemoryStream();
                await File.Data.CopyToAsync(MsFile);
                StreamReader reader = new StreamReader(File.Data);
                string asBase64String = Convert.ToBase64String(MsFile.ToArray());
                Base64 = asBase64String;
                Model.Image = asBase64String;
                ImageDataUrl = string.Format("data:image/png;base64, {0}", asBase64String);
            }
        }
        catch (Exception ex)
        {

        }
    }
}

