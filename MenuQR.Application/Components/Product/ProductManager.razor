@page "/product/manager"
@attribute [Authorize]
@inject IApiService ApiService
@inject IConfiguration configuration
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject IHttpContextAccessor HttpContextAcessor
@inject UserManager<ApplicationUser> UserManager

<h3>Gerenciador de Produtos</h3>
<a href="/product/create/" class="btn btn-primary">Adicionar</a>
@if (Products.Count == 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Imagem</th>
                <th>Nome</th>
                <th>Preço</th>
                <th>Descrição</th>
                <th>Tipo</th>
                <th>Ativo</th>
                <th>Editar</th>
            </tr>
        </thead>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Imagem</th>
                <th>Nome</th>
                <th>Preço</th>
                <th>Descrição</th>
                <th>Tipo</th>
                <th>Ativo</th>
                <th>Editar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (ProductDTO product in Products)
            {
                <tr>
                    <td class="align-middle">
                        <img src="@string.Format("data:image/png;base64, {0}", product.Image)" width="100" height="100" />
                    </td>
                    <td class="align-middle" scope="row">@product.Name</td>
                    <td class="align-middle">R$ @product.Price.ToString("0.00")</td>
                    <td class="align-middle">@product.Description</td>
                    <td class="align-middle">@ProductsType.Where(x => x.Id == product.TypeId).First().TypeName</td>
                    <td class="align-middle">
                        <div class="form-check form-switch">
                            @if (product.Active)
                            {
                                <InputCheckbox @bind-Value="product.Active" @onclick="(args) => ToggleActivity(product.Id, product.CompanyId)" class="form-check-input" type="checkbox" checked="checked" id="flexSwitchCheckDefault" />
                            }
                            else
                            {
                                <InputCheckbox @bind-Value="product.Active" @onclick="(args) => ToggleActivity(product.Id, product.CompanyId)" class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" />
                            }

                        </div>
                    </td>
                    <td class="align-middle">
                        <a href="/product/edit/@product.Id" class="btn btn-primary">Editar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    List<ProductTypeDTO> ProductsType { get; set; } = new List<ProductTypeDTO>();
        [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal CurrentUser;
    private ApplicationUser user = default!;
    private int _companyId;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        if (CurrentUser.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(CurrentUser);
            _companyId = user.CompanyId;
        }
        var url = configuration["ApiLinks:ProductGetAll"];
        GenericCommandResult commandResult = await ApiService.Get<List<ProductDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), _companyId);
        if (commandResult.Sucess && commandResult.Data is List<ProductDTO> productsApi)
            Products = productsApi;
        url = configuration["ApiLinks:ProductTypeGetAll"];
        commandResult = await ApiService.Get<List<ProductTypeDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), _companyId);
        if (commandResult.Sucess && commandResult.Data is List<ProductTypeDTO> productsTypeApi)
            ProductsType = (from p in productsTypeApi
                           join pm in Products on p.Id equals pm.Id
                           select new ProductTypeDTO {Id = p.Id, CompanyId = p.CompanyId, TypeName = p.TypeName}).ToList();

    }
    public async void ToggleActivity(int productId, int companyId)
    {
        var url = configuration["ApiLinks:ToggleActivity"];
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("productId", productId);
        parameters.Add("companyId", companyId);
        GenericCommandResult commandResult = await ApiService.PutWithParameters<ProductDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
        if (!commandResult.Sucess)
            await JsRuntime.InvokeVoidAsync("alert", "Produto não alterado!");
    }

}
