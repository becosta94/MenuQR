@page "/bill/manager"
@attribute [Authorize]
@rendermode InteractiveServer
@inject IConfiguration configuration
@inject IJSRuntime JsRuntime
@inject IApiService ApiService
@inject IHttpContextAccessor HttpContextAcessor
@inject NavigationManager navigationManager

<h3>Gerenciador de Contas</h3>
@if (Bills.Count == 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Número</th>
                <th>Total</th>
                <th>Mesa</th>
                <th></th>
            </tr>
        </thead>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Número</th>
                <th>Total</th>
                <th>Mesa</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (BillDTO bill in Bills)
            {
                <tr>
                    <td class="align-middle">@bill.Id</td>
                    @if (@bill.Total == 0)
                    {
                        <td>-</td>
                    }
                    else
                    {
                        <td class="align-middle">R$ @bill.Total.ToString("0.00")</td>
                    }
                    <td class="align-middle">@bill.Table.Identification</td>
                    @if (bill.Open)
                    {
                        <td class="align-middle">
                            <a @onclick="(args) => CloseBill(bill.TableId)" class="btn btn-danger">Fechar</a>
                        </td>
                    }
                    else
                    {
                        <td class="align-middle">Conta Fechada</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<BillDTO> Bills { get; set; } = new List<BillDTO>();

    protected override async Task OnInitializedAsync()
    {
        string? url = configuration["ApiLinks:BillGetAll"];
        GenericCommandResult commandResult = await ApiService.GetStringByParameter<List<BillDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), "companyId", "1");
        if (commandResult.Sucess)
        {
            Bills =  JsonConvert.DeserializeObject<List<BillDTO>>(commandResult.Data.ToString());
            Bills = Bills.OrderBy(x => x.Open).OrderByDescending(x => x.Id).ToList();
        }

        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }

    public async void CloseBill(int tableId)
    {
        var url = configuration["ApiLinks:CloseBill"];
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("tableId", tableId);
        parameters.Add("companyId", 1);
        parameters.Add("closeTotal", false);
        parameters.Add("customerDocument", null);
        GenericCommandResult commandResult = await ApiService.PutWithParameters<OrderDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
        if (commandResult.Sucess && commandResult.Data is HttpResponseMessage response)
        {
            string? content = response.Content.ReadAsStringAsync().Result;
            BillDTO? contentObjectBill = JsonConvert.DeserializeAnonymousType(content, new BillDTO());
            ErroDTO? contentObjectErro = JsonConvert.DeserializeAnonymousType(content, new ErroDTO());
            if (content is not null && contentObjectBill.Id != 0)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Conta fechada");
                navigationManager.NavigateTo(configuration["ApplicationLinks:BillManager"].ToString(), true);
            }
            else if (content is not null && !string.IsNullOrEmpty(contentObjectErro.Menssage))
                await JsRuntime.InvokeVoidAsync("alert", contentObjectErro.Menssage);
            else
                await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }
}
