@page "/bill/edit/{SetHashCode:int}"
@inject IHttpContextAccessor HttpContextAcessor
@inject IConfiguration configuration
@inject StateContainer stateContainer
@inject IApiService ApiService
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject IUserGetter usergetter
<h3>Conta</h3>

<div>
    @if (Bill != null)
    {
        int i = 0;
        string formName = "addproduct";
        @foreach (var a in _customersOrders)
        {
            <b class="px-5">@a.Where(x => x.Order.CustomerDocument == a.Key).Select(x => x.Order.CustomerDTO.Name).First()</b>
            @foreach (var b in a.GroupBy(x => x.Product.Id))
            {
                <div class="d-flex px-40">
                    <div class="p-2">@b.Count() x</div>
                    <div class="p-2">@b.First().Product.Name (R$ @b.First().Product.Price.ToString("0.00"))</div>
                    <div class="ms-auto p-2">R$ @((b.First().Product.Price * b.Count()).ToString("0.00"))</div>
                    @if (Bill.Open)
                    {
                        <OrderQR.Application.Components.DeleteButton.DeleteButton CompanyId="b.First().CompanyId" Id="b.First().Id" Controller="@_controllerOrder" />
                    }
                </div>
            }
            @foreach (var productOffList in Bill.ProductOffLists.Where(x => x.CustomerDocument == a.Key))
            {
                <div class="d-flex px-40">
                    <div class="p-2">@productOffList.Amount x</div>
                    <div class="p-2">@productOffList.Name (R$ @productOffList.Price.ToString("0.00"))</div>
                    <div class="ms-auto p-2">R$ @((productOffList.Price * @productOffList.Amount).ToString("0.00"))  </div>
                    @if (Bill.Open)
                    {
                        <OrderQR.Application.Components.DeleteButton.DeleteButton CompanyId="productOffList.CompanyId" Id="productOffList.Id" Controller="@_controllerProductOffList" />
                    }
                </div>
            }
            @if (custumerDocumentPaidTips[a.Key])
            {
                <div class="d-flex px-40">
                    <div class="p-2">Opcional: </div>
                    <div class="ms-auto p-2">R$ @(((a.Sum(x => x.Total) + Bill.ProductOffLists.Where(x => x.CustomerDocument == a.Key).Sum(x => x.Amount * x.Price)) * 0.1).ToString("0.00"))</div>
                </div>
            }
            @if (Bill.Open)
            {
                <BillProductAdd Bill="@Bill" Products="@Products" Cpf="@a.Key" UserId="@_userId"></BillProductAdd>
            }

            @if (custumerDocumentPaidTips[a.Key])
            {
                <div class="d-flex px-40">
                    <div class="p-2">Parcial: </div>
                    <div class="ms-auto p-2">R$ @(((a.Sum(x => x.Total) + Bill.ProductOffLists.Where(x => x.CustomerDocument == a.Key).Sum(x => x.Amount * x.Price)) * 1.1).ToString("0.00"))</div>
                </div>
            }
            else
            {
                <div class="d-flex px-40">
                    <div class="p-2">Parcial: </div>
                    <div class="ms-auto p-2">R$ @(((a.Sum(x => x.Total) + Bill.ProductOffLists.Where(x => x.CustomerDocument == a.Key).Sum(x => x.Amount * x.Price))).ToString("0.00"))</div>
                </div>
            }

            i++;
        }
        <div class="d-flex px-40">
            <div class="p-2">Total: </div>
            <div class="ms-auto p-2">R$ @Bill.Total.ToString("0.00")</div>
        </div>
    }
    else
    {
        <p>Conta sem pedidos</p>
    }
</div>

@code {
    BillDTO Bill = new BillDTO();
    [Parameter]
    public int SetHashCode { get; set; }
    List<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private IEnumerable<IGrouping<string, OrderProductDTO>> _customersOrders = new List<IGrouping<string, OrderProductDTO>>();
    private string _controllerOrder = "Order";
    private string _controllerProductOffList = "ProductOffList";
    private bool openOrder = false;
    private Dictionary<string, bool> custumerDocumentPaidTips = new Dictionary<string, bool>();
    private string _userId;

    protected override async Task OnInitializedAsync()
    {
        ApplicationUser user = await usergetter.Get();
        _userId = user.Id;

        Bill = (BillDTO)stateContainer.ObjectTunnel[SetHashCode];
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        string url = string.Empty;
        parameters.Add("companyId", Bill.CompanyId);
        if (Bill.Open)
        {
            url = configuration["ApiLinks:BillGetOpen"];
            parameters.Add("tableId", Bill.TableId);
            parameters.Add("closeTotal", true.ToString());
            parameters.Add("customerDocument", Bill.OrderProducts.First().Order.CustomerDocument);
        }
        else
        {
            url = configuration["ApiLinks:BillGetClose"];
            parameters.Add("billId", Bill.Id);
        }
        GenericCommandResult commandResult = await ApiService.GetWithParameters<object>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
        BillDTO billResultObject = JsonConvert.DeserializeObject<BillDTO>(commandResult.Data.ToString());
        ErroDTO erroResultObject = JsonConvert.DeserializeObject<ErroDTO>(commandResult.Data.ToString());
        if (commandResult.Sucess && billResultObject.Id != 0)
        {
            url = configuration["ApiLinks:CustomerGet"];
            Bill = billResultObject;
            foreach (var orderProduct in Bill.OrderProducts)
            {
                parameters.Clear();
                parameters.Add("tableId", Bill.TableId);
                parameters.Add("companyId", Bill.CompanyId);
                parameters.Add("document", orderProduct.Order.CustomerDocument);
                commandResult = await ApiService.GetWithParameters<CustomerDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
                if (commandResult.Sucess && commandResult.Data is CustomerDTO customer)
                {
                    orderProduct.Order.CustomerDTO = customer;
                    _customersOrders = Bill.OrderProducts.GroupBy(x => x.Order.CustomerDocument);
                }
            }
        }
        else if (!string.IsNullOrEmpty(erroResultObject.Menssage))
            openOrder = true;
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
        url = configuration["ApiLinks:ProductGetAll"];
        commandResult = await ApiService.Get<List<ProductDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), Bill.CompanyId);
        if (commandResult.Sucess && commandResult.Data is List<ProductDTO> productsApi)
            Products = productsApi.Where(x => x.Active).OrderBy(x => x.ProductTypeId).ToList();
        url = configuration["ApiLinks:BillClosureOrderGetPaid"];
        foreach (string custumerDocument in _customersOrders.Select(x => x.Key))
        {
            parameters.Clear();
            parameters.Add("biilId", Bill.Id);
            parameters.Add("companyId", Bill.CompanyId);
            parameters.Add("customerDocument", custumerDocument);
            commandResult = await ApiService.GetWithParameters<BillClosureOrderDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
            if (commandResult.Sucess && commandResult.Data is BillClosureOrderDTO billClosureOrder)
                custumerDocumentPaidTips.Add(custumerDocument, billClosureOrder.Tips);
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && openOrder)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Existem pedidos em aberto, entregue ou cancele para calcualar a conta.");
            navigationManager.NavigateTo(configuration["ApplicationLinks:BaseApplicationLink"] + "/" + configuration["ApplicationLinks:BillManager"].ToString(), true);
        }
    }
}
