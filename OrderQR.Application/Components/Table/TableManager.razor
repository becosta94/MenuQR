@page "/table/manager"
@attribute [Authorize]
@rendermode InteractiveServer
@inject IConfiguration configuration
@inject IJSRuntime JsRuntime
@inject IApiService ApiService
@inject IHttpContextAccessor HttpContextAcessor
@inject UserManager<ApplicationUser> UserManager


<h3>Gerenciador de Mesas</h3>
<a href="/table/create/" class="btn btn-primary">Adicionar</a>
@if (Tables.Count == 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Identificação</th>
                <th>QRLink</th>
                <th>Editar</th>
            </tr>
        </thead>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Identificação</th>
                <th>QRLink</th>
                <th>Editar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var table in Tables)
            {
                <tr>
                    <td class="align-middle">@table.Identification</td>
                    <td class="align-middle">@table.Link</td>
                    <td class="align-middle">
                        <a href="/table/edit/@table.Id" class="btn btn-primary">Editar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<TableDTO> Tables { get; set; } = new List<TableDTO>();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal CurrentUser;
    private ApplicationUser user = default!;
    private int _companyId;
    private string _tableController = "Table";

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;

        if (CurrentUser.Identity.IsAuthenticated)
        {
            user = await UserManager.GetUserAsync(CurrentUser);
            _companyId = user.CompanyId;
        }
        string? url = configuration["ApiLinks:TableGetAll"];
        GenericCommandResult commandResult = await ApiService.Get<List<TableDTO>>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), _companyId);
        if (commandResult.Sucess && commandResult.Data is List<TableDTO> tables)
            Tables = tables.OrderBy(x => x.Identification).ToList();
    }
}
