@page "/{CompanyName}/{TableGuid:guid}/bill/close/{CloseTotal:bool}"
@rendermode InteractiveServer
@inject StateContainer stateContainer
@inject NavigationManager navigationManager
@inject IConfiguration configuration
@inject IHttpContextAccessor HttpContextAcessor
@inject IApiService ApiService
@inject IJSRuntime JsRuntime
@layout OrderQR.Application.Components.Layout.CustomerLayout

<div class="title-container-top d-flex justify-content-around">
    @if (CloseTotal)
    {
        <div>
            <p class="nav-item nav-link">Fechar Total</p>
        </div>
    }
    else
    {
        <div>
            <p class="nav-item nav-link">Fechar Parcial</p>
        </div>
    }
</div>
<div style="padding-top: 60px"></div>
<br />
@if (openOrder)
{
    <div>
        <p>Existem pedidos em aberto, não é possível cálcular a conta.</p>
    </div>
}
else
{
    <div>

        @if (_bill != null)
        {
            @foreach (var a in _customersOrders)
            {
                <p>@a.Where(x => x.Order.CustomerDocument == a.Key).Select(x => x.Order.CustomerDTO.Name).First()</p>
                @foreach (var b in a.GroupBy(x => x.Product.Id))
                {
                    <div class="d-flex">
                        <div class="p-2">@b.Count() x</div>
                        <div class="p-2">@b.First().Product.Name (R$ @b.First().Product.Price.ToString("0.00"))</div>
                        <div class="ms-auto p-2">R$ @((b.First().Product.Price * b.Count()).ToString("0.00"))</div>
                    </div>
                }
                @foreach (var productOffList in _bill.ProductOffLists.Where(x => x.CustomerDocument == a.Key).ToList())
                {
                    <div class="d-flex">
                        <div class="p-2">@productOffList.Amount x</div>
                        <div class="p-2">@productOffList.Name (R$ @productOffList.Price.ToString("0.00"))</div>
                        <div class="ms-auto p-2">R$ @((productOffList.Price * @productOffList.Amount).ToString("0.00"))  </div>
                    </div>
                }
                if (CloseTotal)
                {

                    <div class="d-flex">
                        <div class="p-2">Parcial: </div>
                        <div class="ms-auto p-2">R$ @((a.Sum(x => x.Total) + _bill.ProductOffLists.Where(x => x.CustomerDocument == a.Key).Sum(x => x.Amount * x.Price)).ToString("0.00"))</div>
                    </div>
                }
                <br />
            }
            <div class="d-flex">
                <div class="p-2">Subtotal: </div>
                <div class="ms-auto p-2">R$ @_bill.OrderProducts.Sum(x => x.Total).ToString("0.00")</div>
            </div>
            <div class="d-flex">
                <div class="p-2">Opcional: </div>
                <div class="ms-auto p-2 d-flex">
                    <div>R$ @((_bill.OrderProducts.Sum(x => x.Total) * 0.1).ToString("0.00"))</div>
                    <InputCheckbox class="form-check-input ms-1" @onclick="ToggleTips" @bind-Value="_tips"></InputCheckbox>
                </div>
            </div>
            if (_tips)
            {
                <div class="d-flex">
                    <div class="p-2">Total: </div>
                    <div class="ms-auto p-2">R$ @((_bill.OrderProducts.Sum(x => x.Total) * 1.1).ToString("0.00"))</div>
                </div>
            }
            else
            {
                <div class="d-flex">
                    <div class="p-2">Total: </div>
                    <div class="ms-auto p-2">R$ @((_bill.OrderProducts.Sum(x => x.Total)).ToString("0.00"))</div>
                </div>
            }
        }
    </div>
}

<footer class="footer text-center scroll-container-bottom" style="margin-top: auto">
    <div class="justify-content-around bd-highlight btn-toolbar">
        <div class="btn-group mr-md-3" role="group">
            <button @onclick="Cancel" class="btn btn-secondary">Cancelar</button>
        </div>
        @if (!openOrder)
        {
            <div class="btn-group mr-md-3" role="group">
                <a @onclick="() => Close(int.Parse(_tableId))" class="btn btn-primary">Fechar Conta</a>
            </div>
        }
    </div>
</footer>

@code {
    [Parameter]
    public bool CloseTotal { get; set; }
    private BillDTO _bill;
    private string _customerDocument;
    private IEnumerable<IGrouping<string, OrderProductDTO>> _customersOrders = new List<IGrouping<string, OrderProductDTO>>();
    private string _tableId;
    private string _companyId;
    private bool openOrder = false;
    [Parameter]
    public string CompanyName { get; set; }
    [Parameter]
    public Guid TableGuid { get; set; }
    private bool _error = false;
    private bool _tips = true;
    protected override async Task OnInitializedAsync()
    {
        _customerDocument = HttpContextAcessor.HttpContext.Request.Cookies["CustomerDocument"].ToString();
        _tableId = HttpContextAcessor.HttpContext.Request.Cookies["TableId"].ToString();
        _companyId = HttpContextAcessor.HttpContext.Request.Cookies["CompanyId"].ToString();
        var url = configuration["ApiLinks:BillGetOpen"];
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("tableId", _tableId);
        parameters.Add("companyId", _companyId);
        if (CloseTotal)
        {
            parameters.Add("closeTotal", "true");
            parameters.Add("customerDocument", 0);
        }
        else
        {
            parameters.Add("closeTotal", "false");
            parameters.Add("customerDocument", _customerDocument);
        }
        GenericCommandResult commandResult = await ApiService.GetWithParameters<object>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
        if (commandResult.Sucess)
        {
            BillDTO billResultObject = JsonConvert.DeserializeObject<BillDTO>(commandResult.Data.ToString());
            ErroDTO erroResultObject = JsonConvert.DeserializeObject<ErroDTO>(commandResult.Data.ToString());
            if (billResultObject.Id != 0)
            {
                url = configuration["ApiLinks:CustomerGet"];
                _bill = billResultObject;
                foreach (var a in _bill.OrderProducts)
                {
                    parameters.Clear();
                    parameters.Add("document", _customerDocument);
                    parameters.Add("companyId", _bill.CompanyId);
                    parameters.Add("tableId", _bill.Table.Id);
                    commandResult = await ApiService.GetWithParameters<CustomerDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters);
                    if (commandResult.Sucess && commandResult.Data is CustomerDTO customer)
                    {
                        a.Order.CustomerDTO = customer;
                        _customersOrders = _bill.OrderProducts.GroupBy(x => x.Order.CustomerDocument);
                    }
                }
                return;
            }
            else if (!string.IsNullOrEmpty(erroResultObject.Menssage))
                openOrder = true;
        }
        else
            _error = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && _error)
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }

    public async void Close(int tableId)
    {
        string token = HttpContextAcessor.HttpContext.Request.Cookies["Token"];
        if (string.IsNullOrEmpty(token))
            navigationManager.NavigateTo(_bill.CompanyId.ToString() + "/" + _tableId.ToString() + "/" + configuration["ApplicationLinks:LoginCustomer"].ToString(), true);
        var url = configuration["ApiLinks:BillClosureOrder"];
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("tableId", _tableId);
        parameters.Add("companyId", _companyId);
        parameters.Add("customerDocument", _customerDocument);
        parameters.Add("tips", _tips ? "true" : "false");
        parameters.Add("closeTotal", CloseTotal ? "true" : "false");
        parameters.Add("userId", _customerDocument);
        GenericCommandResult commandResult = await ApiService.PostWithParameters<BillDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters, null);
        if (commandResult.Sucess && commandResult.Data is HttpResponseMessage response)
        {
            string? content = response.Content.ReadAsStringAsync().Result;
            BillDTO? contentObjectBill = JsonConvert.DeserializeAnonymousType(content, new BillDTO());
            ErroDTO? contentObjectErro = JsonConvert.DeserializeAnonymousType(content, new ErroDTO());
            if (content is not null && contentObjectBill.Id != 0)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Conta foi enviada para fechamento, aguarde o garçom para o pagamento.");
                navigationManager.NavigateTo(_bill.CompanyId.ToString() + "/" + _bill.TableId.ToString() + "/" + configuration["ApplicationLinks:LoginCustomer"].ToString(), true);
            }
            else if (content is not null && !string.IsNullOrEmpty(contentObjectErro.Menssage))
                await JsRuntime.InvokeVoidAsync("alert", contentObjectErro.Menssage);
            else
                await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocorreu um erro, contate a administração");
    }
    private void Cancel()
    {
        navigationManager.NavigateTo(CompanyName + "/" + TableGuid + "/" + configuration["ApplicationLinks:ProductSelection"]);
    }
    private void ToggleTips()
    {
        _tips = !_tips;
        StateHasChanged();
    }
}
