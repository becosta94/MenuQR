@page "/product/typeedit/{id:int}"
@attribute [Authorize]
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject IWebHostEnvironment Env
@inject IConfiguration configuaration
@inject IJSRuntime JsRuntime
@inject IApiService ApiService
@inject IHttpContextAccessor HttpContextAcessor
@inject IUserGetter usergetter
<h3>Adicionar Produto</h3>

<EditForm OnValidSubmit="OnSubmit" Model="@Model" FormName="addProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Nome:</label>
        <InputText @bind-Value="Model.TypeName" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Enviar</button>
</EditForm>

@code {
    private ProductTypeDTO Model { get; set; } = new ProductTypeDTO();
    [Parameter]
    public int Id { get; set; }
    private string _userId;
    private int _companyId;
    protected override async Task OnInitializedAsync()
    {
        ApplicationUser user = await usergetter.Get();
        _userId = user.Id;
        _companyId = user.CompanyId;
        var url = configuaration["ApiLinks:ProductTypeGetById"];
        GenericCommandResult commandResult = await ApiService.GetById<ProductTypeDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), Id.ToString());
        if (commandResult.Sucess && commandResult.Data is ProductTypeDTO)
        {
            Model = (ProductTypeDTO)commandResult.Data;
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", "Produto não encontrado!");
    }

    private async void OnSubmit()
    {
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("userId", _userId);
        var url = configuaration["ApiLinks:ProductTypeUpdate"];
        GenericCommandResult commandResult = await ApiService.PutWithParameters<ProductTypeDTO>(url, HttpContextAcessor.HttpContext.Request.Cookies["Token"].ToString(), parameters, Model);
        if (commandResult.Sucess)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Produto alterado!");
            navigationManager.NavigateTo(configuaration["ApplicationLinks:ProductTypeManager"]);
        }
        else
            await JsRuntime.InvokeVoidAsync("alert", "Produto não alterado!");
    }
}

